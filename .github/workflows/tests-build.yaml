name: "Tests, Build & Deploy"

on:
    pull_request:
    push:
        branches:
            - main
            - develop

jobs:
    test:
        runs-on: 'ubuntu-latest'
        env:
            fail-fast: true
        steps:
            - name: "Checkout code"
              uses: actions/checkout@v2.3.3

            - name: "Install PHP with extensions"
              uses: shivammathur/setup-php@2.7.0
              with:
                  coverage: "none"
                  extensions: intl, mysql, ctype, iconv
                  php-version: 8.1
                  tools: composer:v2

            - name: "Add PHPUnit matcher"
              run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

            - name: "Set composer cache directory"
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: "Cache composer"
              uses: actions/cache@v2.1.2
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-8.0-composer-${{ hashFiles('composer.json') }}
                  restore-keys: ${{ runner.os }}-8.0-composer-

            - name: "Composer install"
              id: install
              run: composer install --no-interaction --no-progress

            - name: "Compile CSS and Javascript"
              run: |
                  yarn install
                  yarn dev

            - name: "Init database"
              run: ./bin/console doctrine:database:create --env=test

            - name: "Execute migrations"
              run: ./bin/console doctrine:migration:migrate -n --env=test

            - name: "Load fixtures"
              run: ./bin/console doctrine:fixtures:load -n --env=test

            - name: "Run tests"
              run: vendor/bin/phpunit

    build:
        runs-on: 'ubuntu-latest'
        if: github.ref == 'refs/heads/main'
        concurrency: production
        env:
            APP_ENV: prod
            BRANCH: ${{ github.ref_name }}
        needs: ['test']
        steps:
            - name: "Checkout code"
              uses: actions/checkout@v2

            - name: "Install PHP with extensions"
              uses: shivammathur/setup-php@2.7.0
              with:
                  coverage: "none"
                  extensions: intl, mysql, ctype, iconv
                  php-version: 8.1
                  tools: composer:v2

            - name: "Composer install"
              run: composer install --no-dev --optimize-autoloader --no-interaction

            - name: "Compile CSS and Javascript"
              run: |
                  yarn install
                  yarn build

            - name: "Create deployment artifact"
              uses: thedoctor0/zip-release@master
              with:
                  type: 'zip'
                  filename: app-build-${{ env.BRANCH }}-latest.zip
                  exclusions: '*.git* /*node_modules/* /*tests/* /*var/cache/*'

            - name: "Store artifact for distribution"
              uses: appleboy/scp-action@master
              with:
                host: ${{ secrets.HOST }}
                username: ${{ secrets.SSH_USERNAME }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                port: ${{ secrets.SSH_PORT }}
                source: app-build-${{ env.BRANCH }}-latest.zip
                target: "$HOME/build"

    deploy:
        runs-on: 'ubuntu-latest'
        if: github.ref == 'refs/heads/main'
        environment:
            name: production
            url: https://jobbsy.dev
        concurrency: production
        needs: ['build']
        env:
            ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        steps:
            - name: "Checkout code"
              uses: actions/checkout@v2

            - name: Install SSH key
              uses: shimataro/ssh-key-action@v2
              with:
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                known_hosts: ${{ secrets.KNOWN_HOSTS }}

            - name: Adding Known Hosts
              run: "ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts"

            - name: "Setup Ansible"
              run: |
                  echo "$ANSIBLE_VAULT_PASSWORD" > .ansible/.vault_pass
                  ansible-galaxy install -r .ansible/requirements.yml

            - name: "Deploy"
              run: make deploy
